buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.4.7"
    }
}

apply plugin: 'java'
apply plugin: "me.champeau.gradle.jmh"


repositories {
    mavenCentral()
}

dependencies {
    compile 'org.bytedeco.javacpp-presets:fftw-platform:3.3.8-1.4.2'
    compile 'com.github.wendykierp:JTransforms:3.1'
    compile 'org.apache.commons:commons-math3:3.6.1'

    def jCudaVersion = "0.9.2"
    def classifier = getOsString() + "-" + getArchString()
    compile ("org.jcuda:jcuda:$jCudaVersion") {
        transitive = false
    }
    compile "org.jcuda:jcuda-natives:$jCudaVersion:$classifier"
    compile ("org.jcuda:jcufft:$jCudaVersion") {
        transitive = false
    }
    compile "org.jcuda:jcufft-natives:$jCudaVersion:$classifier"

    testCompile 'junit:junit:4.12'
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.10.2"
}

def static getOsString() {
    String vendor = System.getProperty("java.vendor")
    if ("The Android Project" == vendor) {
        return "android"
    } else {
        String osName = System.getProperty("os.name")
        osName = osName.toLowerCase(Locale.ENGLISH)
        if (osName.startsWith("windows")) {
            return "windows"
        } else if (osName.startsWith("mac os")) {
            return "apple"
        } else if (osName.startsWith("linux")) {
            return "linux"
        } else if (osName.startsWith("sun")) {
            return "sun"
        }
        return "unknown"
    }
}

def static getArchString() {
    String osArch = System.getProperty("os.arch")
    osArch = osArch.toLowerCase(Locale.ENGLISH)
    if ("i386" == osArch || "x86" == osArch || "i686" == osArch) {
        return "x86"
    } else if (osArch.startsWith("amd64") || osArch.startsWith("x86_64")) {
        return "x86_64"
    } else if (osArch.startsWith("arm64")) {
        return "arm64"
    } else if (osArch.startsWith("arm")) {
        return "arm"
    } else if ("ppc" == osArch || "powerpc" == osArch) {
        return "ppc"
    } else if (osArch.startsWith("ppc")) {
        return "ppc_64"
    } else if (osArch.startsWith("sparc")) {
        return "sparc"
    } else if (osArch.startsWith("mips64")) {
        return "mips64"
    } else if (osArch.startsWith("mips")) {
        return "mips"
    } else if (osArch.contains("risc")) {
        return "risc"
    }
    return "unknown"
}